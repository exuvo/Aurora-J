apply plugin: "artemis"

sourceSets.main.java.srcDirs = [ "src" ]
sourceSets.main.kotlin.srcDirs = [ "src" ]

project.ext.mainClassName = "se.exuvo.aurora.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");
project.ext.weaveDir = new File("$buildDir/explodedForWeave")

task run(dependsOn: classes, type: JavaExec) {
	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	workingDir = project.assetsDir
	ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
	workingDir = project.assetsDir
	ignoreExitValue = true
	debug = true
}

// https://github.com/junkdog/artemis-odb/wiki/Weaving-LibGDX
// Prepare folder with all dependencies exploded.
task explodeForWeave(type: Sync, dependsOn: classes) {
	into project.weaveDir
	from files(sourceSets.main.output.classesDir)
	from files(sourceSets.main.output.resourcesDir)
	from {configurations.compile.collect {zipTree(it)}}
	from files(project.assetsDir)
}

// artemis-odb: weaving settings.
weave {
	dependsOn explodeForWeave
	classesDir = project.weaveDir
	enableArtemisPlugin = true
	enablePooledWeaving = true
	optimizeEntitySystems = true
}

task dist(type: Jar, dependsOn: weave) {
	from project.weaveDir
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
}

dist.dependsOn classes

eclipse {
	project {
		name = appName + "-desktop"
		linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
	}
	/*classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
            }
        }
    }*/
	/*classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry ->
					
					if (entry.kind == 'src') {
						entry.includes = []
						entry.excludes = []
						entry.getEntryAttributes().clear()
					}
					
					false
				}
			}
		}
	}*/
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
	doLast {
		def classpath = new XmlParser().parse(file(".classpath"))
		new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
		def writer = new FileWriter(file(".classpath"))
		def printer = new XmlNodePrinter(new PrintWriter(writer))
		printer.setPreserveWhitespace(true)
		printer.print(classpath)
	}
}
