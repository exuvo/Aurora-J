apply plugin: "artemis"

sourceSets {
	main.java.srcDirs = [ "src" ]
	main.kotlin.srcDirs = [ "src" ]
	main.resources.srcDirs = [ "src" ]
}

archivesBaseName = "AuroraJ"

project.ext {
	mainClassName = "se.exuvo.aurora.DesktopLauncher"
	assetsDir = new File("assets");
	weaveDir = new File("$buildDir/explodedForWeave")
}

jar.manifest.attributes 'Main-Class': project.mainClassName

task run(dependsOn: classes, type: JavaExec) {
	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
//	workingDir = project.assetsDir
	ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
	standardInput = System.in
//	workingDir = project.assetsDir
	ignoreExitValue = true
	debug = true
}

// https://github.com/junkdog/artemis-odb/wiki/Weaving-LibGDX
// Prepare folder with all dependencies exploded.
task explodeForWeave(type: Sync) {
	duplicatesStrategy = "include"
	dependsOn classes, configurations.runtimeClasspath
	into project.weaveDir
	
	from (configurations.runtimeClasspath.findAll{it.name.endsWith("jar")}.collect{zipTree(it)}) {
		exclude "fonts/ArialUni.TTF"
		exclude "org/sqlite/native/FreeBSD/**"
		exclude "org/sqlite/native/Linux/ppc64/**"
		exclude "org/sqlite/native/Linux/armv6/**"
		exclude "org/sqlite/native/Linux/armv7/**"
		exclude "org/sqlite/native/Linux/arm/**"
		exclude "org/sqlite/native/Linux/aarch64/**"
		exclude "org/sqlite/native/Linux/android-arm/**"
		exclude "linux/arm32/**"
		exclude "linux/arm64/**"
		//TODO remove these and make overwrite work instead
		exclude "com/artemis/EntitySubscription.class"
		exclude "com/artemis/EntitySubscription\$SubscriptionExtra.class"
		exclude "com/artemis/EntitySubscription\$SubscriptionListener.class"
		exclude "com/badlogic/gdx/Lwjgl3Graphics.class"
		exclude "com/badlogic/gdx/Lwjgl3Graphics\$1.class"
		exclude "com/badlogic/gdx/Lwjgl3Graphics\$Lwjgl3DisplayMode.class"
		exclude "com/badlogic/gdx/Lwjgl3Graphics\$Lwjgl3Monitor.class"
	}
	//from {configurations.compile.collect {zipTree(it)}}
	
	from files(sourceSets.main.output.classesDirs) {
		exclude "**/*.kt"
	}
	from files(sourceSets.main.output.resourcesDir)
	
	from new File("$projectDir/log4j2.xml")
	
	into ("assets") {
		from files(project.assetsDir)
	}
}

// artemis-odb: weaving settings.
weave {
	dependsOn explodeForWeave
	classesDir = project.weaveDir
	enableArtemisPlugin = true
	enablePooledWeaving = true
	optimizeEntitySystems = true
}

//dependsOn: weave
task dist(type: Jar) {
	dependsOn explodeForWeave
	from project.weaveDir
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
}

eclipse {
  project.name = appName + "-core"
  //autoBuildTasks build
  //synchronizationTasks taskName
  
  /*classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
            }
        }
    }*/
	/*classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry ->
					
					if (entry.kind == 'src') {
						entry.includes = []
						entry.excludes = []
						entry.getEntryAttributes().clear()
					}
					
					false
				}
			}
		}
	}*/
}
